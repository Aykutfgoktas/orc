// Code generated by MockGen. DO NOT EDIT.
// Source: ./cfile/main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cfile "orc/cfile"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConfigFile is a mock of IConfigFile interface.
type MockIConfigFile struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigFileMockRecorder
}

// MockIConfigFileMockRecorder is the mock recorder for MockIConfigFile.
type MockIConfigFileMockRecorder struct {
	mock *MockIConfigFile
}

// NewMockIConfigFile creates a new mock instance.
func NewMockIConfigFile(ctrl *gomock.Controller) *MockIConfigFile {
	mock := &MockIConfigFile{ctrl: ctrl}
	mock.recorder = &MockIConfigFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigFile) EXPECT() *MockIConfigFileMockRecorder {
	return m.recorder
}

// CheckConfigFile mocks base method.
func (m *MockIConfigFile) CheckConfigFile() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfigFile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConfigFile indicates an expected call of CheckConfigFile.
func (mr *MockIConfigFileMockRecorder) CheckConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigFile", reflect.TypeOf((*MockIConfigFile)(nil).CheckConfigFile))
}

// ConfigFile mocks base method.
func (m *MockIConfigFile) ConfigFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigFile indicates an expected call of ConfigFile.
func (mr *MockIConfigFileMockRecorder) ConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFile", reflect.TypeOf((*MockIConfigFile)(nil).ConfigFile))
}

// Reader mocks base method.
func (m *MockIConfigFile) Reader() (cfile.IReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(cfile.IReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockIConfigFileMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockIConfigFile)(nil).Reader))
}

// Writer mocks base method.
func (m *MockIConfigFile) Writer(data interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockIConfigFileMockRecorder) Writer(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockIConfigFile)(nil).Writer), data)
}

// MockIReader is a mock of IReader interface.
type MockIReader struct {
	ctrl     *gomock.Controller
	recorder *MockIReaderMockRecorder
}

// MockIReaderMockRecorder is the mock recorder for MockIReader.
type MockIReaderMockRecorder struct {
	mock *MockIReader
}

// NewMockIReader creates a new mock instance.
func NewMockIReader(ctrl *gomock.Controller) *MockIReader {
	mock := &MockIReader{ctrl: ctrl}
	mock.recorder = &MockIReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReader) EXPECT() *MockIReaderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockIReader) Decode(d interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockIReaderMockRecorder) Decode(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockIReader)(nil).Decode), d)
}
